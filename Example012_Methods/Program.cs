//Первая группа методов Void-метод
void Method1()
{
    Console.WriteLine("Автор ...");
}

//Method1();


//Вторая группа методов Void-метод

void Method2(string msg) //в скобочках указан какой то аргумент, который метод принимает
{
    Console.WriteLine(msg); // здесь будем выводить вот такое сообщение msg
}
//Для того чтобы вызвать подобного рода метод
//Method2("Текст сообщения"); //требуется указать его идентификатор "Method2" 
//и в скобках указывать результат, в данном случае у нас выступает текст сообщения


void Method21(string msg, int count) //в скобочках указан какой то аргумент, который метод принимает, в данном случае (сообщение, число)
{
    int i = 0;
    while (i < count) // отправка некоторого количества сообщений
    {
        Console.WriteLine(msg);
        i++; //увеличение счетчика на единицу
    }
}
//Method21("Текст", 4); // вызываем метод, указываем текст сообщения и количество, сколько раз мы хотим видеть это сообщение

//Method21(msg: "Текст", count: 4); // можем явно указывать какому аргументу какое значение должно быть передано. Аргументы при этом можно менять местами


//Третья группа методов

int Method3() //Если метод что то возвращает, мы в обязательном порядке должны будем указать тип данных значение которого мы ожидаем, для нас это будет "Method3" аргументы он никакие не принимает, поэтому в скобках пусто
{
    return DateTime.Now.Year; //Обязательное использование оператора return, выведим например текущий год
}
//Таким образом, для того чтобы метод "Method3" вызвать:
//int year = Method3(); // используем идентификатор переменной "year" и через оператор присваивания "=" положить нужное значение
//Console.WriteLine(year); // выводим результат полученный в переменную из метода 

//Четвертая группа методов
/* string Method4(int count, string text) //К примеру, возвращать будем строку "c" тип "string", "count" раз с типом "int"
{
    int i = 0; //возьмем цикл
    string result = String.Empty;//укажем куда мы будем класть результат, которым является пустая строка - "String.Empty"

    while (i < count)
    {
        result = result + text; // пустая строка и значение, которое мы положим в "c" из программы
        i++;
    }
    return result; //отдаем результат, который мы ожидаем получить из метода
}

string res = Method4(10, "Текст"); // указываем переменную с типом "string" в которую мы положим полученный результат из метода "Method4"
Console.WriteLine(res);
 */

/* string Method4(int count, string text) //К примеру, возвращать будем строку "c" тип "string", "count" раз с типом "int"
{

    string result = String.Empty;//укажем куда мы будем класть результат, которым является пустая строка - "String.Empty"

    for (int i = 0; i < count; i++) // "int i = 0;" - инициализация счетчика(с какого значения он начинается). "i < count" - проверка услвоия. "i++" - делается инкримент (увеличение счетчика) 
    {
        result = result + text; // пустая строка и значение, которое мы положим в "c" из программы
    }
    return result; //отдаем результат, который мы ожидаем получить из метода
}

string res = Method4(10, "Текст"); // указываем переменную с типом "string" в которую мы положим полученный результат из метода "Method4"
Console.WriteLine(res);
 */

//Вывести на экран таблицу умножения

/* for (int i = 2; i <= 10; i++) // "int i = 2;" - таблица уменожения начинается с "2". Пока счетчик "i <= 10;", увеличваем его "i++"
{
    for (int j = 2; j <= 10; j++) // берем второй цикл, со счетчиком "int j =2;". Пока счетчик "j <= 10;", увеличваем его "j++"
    {
        Console.WriteLine($"{i} x {j} = {i * j}"); // в теле второго цикла укажем произведение
    }
    Console.WriteLine(); // сделаем переход на новую строку, для удобной визуализации
} */

// Дан текст. В тексте нужно все пробелы заменить черточками,
// маленькие буквы “к” заменить большими “К”, а большие “С” заменить
// маленькими “с”.

/* string text = "- Я думаю, - сказал князь, улыбаясь, - что, "
            + "ежели бы вас послали вместо нашего милого Винценгероде, "
            + "вы бы взяли приступом согласие прусского короля. "
            + "Вы так краснодречивы. Вы дадите мне чаю?";

//Если будет какая та строка "string s =" то для это строки есть 
//некоторое количество вспомогательного функционала "string s = "qwerty"" в частности, 
//если требуется обратиться к конкретному символу строки, мы моем это делать 
//начиная отсчитывать позицию символов с нуля, т.е. q -0, w -1, e -3, r -4, t -5, y - 6
//для того что бы получить конкретный символ, мы можем через квадратные скобочки обратиться к массиву символов
// и через идентификатор указать его номер "s[3]" - это будет буква "r"
// возвращаться нам будет строка поэтому используем четвертый вид методов
string Replace(string text, char oldValue, char newValue) //назовем метод "Replace" далее тип и имя аргумента, далее указываем конкретный символ "oldValue" и символ на который мы будем менять "newValue"
{
    string result = String.Empty; // получаем пустую строку
    int lenght = text.Length; //получаем длину нашей строки
    for (int i = 0; i < lenght; i++) //воспользуемся циклом "for", где мы пробегаемся от 0 индекса до последнего из длины строки
    {
        if (text[i] == oldValue) result = result + $"{newValue}"; //если текущий символ "text [i] =" совпал с тем символом, который мы хотим заменить, то в результат "return" мы должны будем положить новое это значение в виде строки $"{newValue}"
        else result = result + $"{text[i]}";//если же совпадений не обнаружено, то в "result" нужно добавить текущий символ, который как раз таки и был
    }
    return result; //возвращаем результат из метода
}
string newText = Replace(text, ' ', '|');// указываем что на что меняем
Console.WriteLine(newText);

Console.WriteLine(); //разделяем каждый вывод в консоль пустой строчкой
newText = Replace(newText, 'к', 'К'); //заменяем в новом тексте маленькие "к" на большие "К"
Console.WriteLine(newText);//выводим результат с изменнными "к"

Console.WriteLine(); //разделяем каждый вывод в консоль пустой строчкой
newText = Replace(newText, 'с', 'С'); //заменяем в новом тексте маленькие "с" на большие "С"
Console.WriteLine(newText);//выводим результат с изменнными "с" 
*/


int[] arr = { 1, 2, 3, 4, 5, 6, 7, 1, 1 }; //сначала заведенм массив, который мы будем отсортировывать
//решаем подзадачу, которая будет отвечать за то что вывести данный массив на экран, для этого напишем отдельный метод
void PrintArray(int[] array) // в качестве аргумента будет приходить массив
{
    int count = array.Length; //определяем длину массива
    for (int i = 0; i < count; i++)//здесь цикл for пробегает по всем элементам нашего массива и показываем на экране
    {
        Console.Write($"{array[i]} "); //выводим результат в одну строку и через пробел вот здесь } " будем показывать
    }
    Console.WriteLine(); //по окончанию операций выводим пустую строку
}

//следующим этапом запускаем метод, который будет упорядочевать наш массив
void SelectionSort(int[] array)//в качестве аргумента точно таким же образом как и в методе выше, будет приходить некий масив "array"
{
    int count = array.Length; //определяем длину массива
    for (int i = 0; i < array.Length - 1; i++) // здесь цикл for пробегает по всем элементам нашего массива, при этом сделаем обращение к нашему массиву через "array.Lenght" 
    {
        int minPosition = i;//на этом этапе мы определяем ту позицию на которую мы смотрим, назовем ее minPosition и запоминаем ту позицию рабочего элемента для которого мы в дальнейшем будем производить какие то действия
        //ищем тот самый минимальный элемент, воспользуемся цилом внутри цикла
        for (int j = i + 1; j < array.Length; j++)//начальная позиция от которой мы будем начинать эти действия, это то кусочек массива, который был отсортирован, мы уже к нему не касаемся, а то что у нас отсортировано, как раз таки с первой позиции

        {
            if (array[j] < array[minPosition]) minPosition = j;// ищем элемент минимальный, для того чтобы это сделать, мы ищем текущий "array[j]", если он меньше того элемента, который мы предполагали на вот этой минимальной позиции "minPosition", то нужно будет эту позицию сохранить]

        }

        //нам потребуется поменять местами значения нашей минимальной позиции с той позицией у которую мы нашли 
        int temporary = array[i]; // присваиваем переменной "temporary" нашу рабочую позицию, она будет вычислять индексом i "array[i]
        array[i] = array[minPosition];//меняем местами нашу рабочую позицию на полученное значение, соовтетствено в i-тую позицию мы должны будем положить тот элемент, который будет найден в процессе получения "minPosition", по сути замена двух переменных местами
        array[minPosition] = temporary; //тем самым кладем в него элемент, который у нас был положен во временную переменную

    }
}

PrintArray(arr); // заупскаем метод
SelectionSort(arr);

PrintArray(arr); // заупскаем метод