//Первая таблица
string[,] table = new string[2, 5];//определяем таблицу с кол-ом столбцов и строк
table[1, 2] = "слово"; //для того чтобы обратиться к нужному нам элементу, мы указываем наименование массива и в квадратных скобочках индекс строки и индекс столбца
//первый элемент будет с индексами [0, 0]
//для строк инициализация константы происходит командой String.Empthy

for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
        Console.WriteLine($"-{table[rows, columns]}-");
    }
}

//Вторая таблица
int[,] matrix = new int[3, 4];

for (int i = 0; i < 3; i++) // for (int i = 0; i < matrix.GetLenght(0); i++) - конструкция matrix.GetLenght(0) - выдает таблицу с 3 строками
{
    for (int j = 0; j < 4; j++) // for (int j = 0; j < matrix.GetLenght(1); j++) - конструкция matrix.GetLenght(1) - выдает таблицу с 4 столбцами
    {
        Console.Write($"{matrix[i, j]} ");
    }
    Console.WriteLine();
}

//третья таблица
int[,] matrix1 = new int[3, 4];

PrintArray(matrix1);

void PrintArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine();
    }
}

//опишем метод, который будет заполнять матрицу случайными числами
void FillArray(int[,] matr1)
{
    for (int i = 0; i < matr1.GetLength(0); i++)
    {
        for (int j = 0; j < matr1.GetLength(1); j++)
        {
            matr1[i, j] = new Random().Next(1, 10);
        }
        Console.WriteLine();
    }
}

int[,] matrix2 = new int[3, 4];
PrintArray(matrix2);
FillArray(matrix2);
Console.WriteLine();
PrintArray(matrix2);

//Нарисовать и закрасить картинку
// 0 - закрашенный пиксель
// 1- незакрашенный пиксель

int[,] pic = new int[,]//необязательно указывать количество строчек и столбцов, если есть фиксированные данные
{
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};

void PrintImage(int[,] image) //напишем метод, который будет рисовать контур нашей фигуры на картинке
{
    for (int i = 0; i < image.GetLength(0); i++)
    {
        for (int j = 0; j < image.GetLength(1); j++)
        {
            //image[i, j] = new Random().Next(1, 10);
            if (image[i, j] == 0) Console.Write($" ");
            else Console.Write($"+");
        }
        Console.WriteLine();
    }
}

void FillImage(int row, int col)//опишем метод который будет закрашивать фигуру на картинке. В качестве аргументов указываем позицию строки и столбца пикселя, с которого мы должны будем начать
{
    if (pic[row, col] == 0) // проверяем условие, если текущий пиксель с указанной позиции [row, col] равен нулю, т.е. он не закрашен, в этом случае мы будем его красить
    {
        pic[row, col] = 1; //если услвоие выполняется красим его единичкой
        //Ниже приведена рекурсия - это медот, который вызывает сам себя
        FillImage(row - 1, col); //метод вызывает сам себя, движемся вверх
        FillImage(row, col - 1); //метод вызывает сам себя, движемся влево
        FillImage(row + 1, col); //метод вызывает сам себя, движемся вниз
        FillImage(row, col + 1); //метод вызывает сам себя, движемся вправо
    }
}

PrintImage(pic); //печатаем пиксель
FillImage(13, 13); //вызываем метод закраски с указанием координат начальной точки (пикселя)
PrintImage(pic); //печатаем пиксель


//////////////////////
/* Напишем метод, который будет принимать число факториал, которого нужно вычислить, пример:
Факториал

5! = 5 * 4 * 3 * 2 * 1
    5 * 4!
        4 * 3!
            3 * 2!
                2 * 1! */

int Factorial(int n) //Определим метод, возвращающий int и в качестве аргумента принимающий другое целое число
{
    if (n == 1) return 1;//по определению факториала, явно укажем, если мы дошли до 1, то мы должны вернуть единицу, поскольку это определение факториала ( 0! - это тоже единица)
    else return n * Factorial(n - 1); //В проитвном случае, нам нужно взять текущее значение и умножить на факториал предыдущего значения
}
Console.WriteLine(Factorial(3)); // Факториал трех, это 1*2*3 = 6

/// Для больших чисел
int Factorial1(int n) //Определим метод, возвращающий int и в качестве аргумента принимающий другое целое число
{
    if (n == 1) return 1;//по определению факториала, явно укажем, если мы дошли до 1, то мы должны вернуть единицу, поскольку это определение факториала ( 0! - это тоже единица)
    else return n * Factorial1(n - 1); //В проитвном случае, нам нужно взять текущее значение и умножить на факториал предыдущего значения
}
for (int i = 0; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial1(i)}");
}


//При таком решении мы дойдем только до 17! (17 факториала), послкольку оно имеет число 288522240, следующее уже не вместится в память с текущим типом Int
//Есть несколько способов решения, один из них изменение типа int на double
double Factorial2(int n) //Заменяем int на double для возвращаемого результата
{
    if (n == 1) return 1;//по определению факториала, явно укажем, если мы дошли до 1, то мы должны вернуть единицу, поскольку это определение факториала ( 0! - это тоже единица)
    else return n * Factorial2(n - 1); //В проитвном случае, нам нужно взять текущее значение и умножить на факториал предыдущего значения
}
for (int i = 0; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial2(i)}");
}

/////////////////////
// Фибоначчи
// 1 1 2 3 5 8 13 21 …
// f
// n
//  = fn-1 + fn-2

//укажем определение, f от одного это единичка f(1) = 1
//Далее, f от двух это единичка f(2) = 1
//Далее, f(n) = f(n - 1) + f(n - 2)

int Fibonacci(int n) //напишем функцию, которая нам будет возвращать целое число, определяем ее наименование "Fibonacci", в качестве аргумента указываем "int n"
//и говорим
{
    if (n == 1 || n == 2) return 1;//если значение n == 1 или n == 2, то возвращаем единицу
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

//Далее посмотрим, как будут считаться некоторые числа Фибоначи, к примеру 10
for (int i = 1; i < 10; i++)
{
    Console.WriteLine(Fibonacci(i));
}
//Результатом будет, что каждое следующее будет суммой чисел двух предыдущих

//Теперь изменим тип int на double для 40 чисел
double Fibonacci1(int n) //напишем функцию, которая нам будет возвращать целое число, определяем ее наименование "Fibonacci1", в качестве аргумента указываем "int n"
//и говорим
{
    if (n == 1 || n == 2) return 1;//если значение n == 1 или n == 2, то возвращаем единицу
    else return Fibonacci1(n - 1) + Fibonacci1(n - 2);
}

//Далее посмотрим, как будут считаться некоторые числа Фибоначи, к примеру 10
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Fibonacci1(i)}");
}

